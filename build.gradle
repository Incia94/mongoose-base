description = "mongoose-base"

import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardOpenOption

ext {
	log4j2PluginsDatPath = Paths.get(
		"META-INF", "org", "apache", "logging", "log4j", "core", "config", "plugins", "Log4j2Plugins.dat",
	)
	mainClass = "${rootPkg}.base.Main"
	provided3rdPartyClasses = [
		"it/unimi/dsi/fastutil/bytes/ByteIterator.class",
		"it/unimi/dsi/fastutil/Stack.class",
		"it/unimi/dsi/fastutil/Arrays.class",
		"it/unimi/dsi/fastutil/Swapper.class",
		"it/unimi/dsi/fastutil/Hash.class",
		"it/unimi/dsi/fastutil/Hash\$Strategy.class",
		"it/unimi/dsi/fastutil/Function.class",
		"it/unimi/dsi/fastutil/HashCommon.class",
		"it/unimi/dsi/fastutil/objects/AbstractObjectCollection.class",
		"it/unimi/dsi/fastutil/objects/ObjectSet.class",
		"it/unimi/dsi/fastutil/objects/ObjectBidirectionalIterator.class",
		"it/unimi/dsi/fastutil/objects/Object2IntMap.class",
		"it/unimi/dsi/fastutil/objects/Object2IntMap\$FastEntrySet.class",
		"it/unimi/dsi/fastutil/objects/ObjectList.class",
		"it/unimi/dsi/fastutil/objects/AbstractObjectList.class",
		"it/unimi/dsi/fastutil/objects/ObjectCollection.class",
		"it/unimi/dsi/fastutil/objects/AbstractObjectListIterator.class",
		"it/unimi/dsi/fastutil/objects/ObjectArrayList.class",
		"it/unimi/dsi/fastutil/objects/AbstractObject2IntFunction.class",
		"it/unimi/dsi/fastutil/objects/Object2IntFunction.class",
		"it/unimi/dsi/fastutil/objects/ObjectIterators.class",
		"it/unimi/dsi/fastutil/objects/AbstractObject2IntMap.class",
		"it/unimi/dsi/fastutil/objects/ObjectArrays.class",
		"it/unimi/dsi/fastutil/objects/AbstractObjectBidirectionalIterator.class",
		"it/unimi/dsi/fastutil/objects/ObjectIterator.class",
		"it/unimi/dsi/fastutil/objects/ObjectArraySet.class",
		"it/unimi/dsi/fastutil/objects/Object2IntOpenHashMap.class",
		"it/unimi/dsi/fastutil/objects/ObjectListIterator.class",
		"it/unimi/dsi/fastutil/objects/ObjectIterable.class",
		"it/unimi/dsi/fastutil/objects/AbstractObjectSet.class",
		"it/unimi/dsi/fastutil/objects/AbstractObjectIterator.class",
		"it/unimi/dsi/fastutil/BidirectionalIterator.class",
		"it/unimi/dsi/fastutil/shorts/ShortIterator.class",
		"it/unimi/dsi/fastutil/ints/IntArrayList.class",
		"it/unimi/dsi/fastutil/ints/AbstractIntIterator.class",
		"it/unimi/dsi/fastutil/ints/IntListIterator.class",
		"it/unimi/dsi/fastutil/ints/AbstractIntCollection.class",
		"it/unimi/dsi/fastutil/ints/AbstractInt2IntMap.class",
		"it/unimi/dsi/fastutil/ints/AbstractInt2ObjectFunction.class",
		"it/unimi/dsi/fastutil/ints/AbstractIntBidirectionalIterator.class",
		"it/unimi/dsi/fastutil/ints/Int2IntFunction.class",
		"it/unimi/dsi/fastutil/ints/AbstractIntSet.class",
		"it/unimi/dsi/fastutil/ints/Int2IntOpenHashMap.class",
		"it/unimi/dsi/fastutil/ints/IntArraySet.class",
		"it/unimi/dsi/fastutil/ints/IntList.class",
		"it/unimi/dsi/fastutil/ints/IntStack.class",
		"it/unimi/dsi/fastutil/ints/IntIterator.class",
		"it/unimi/dsi/fastutil/ints/IntBidirectionalIterator.class",
		"it/unimi/dsi/fastutil/ints/IntIterable.class",
		"it/unimi/dsi/fastutil/ints/Int2ObjectFunction.class",
		"it/unimi/dsi/fastutil/ints/Int2ObjectOpenHashMap.class",
		"it/unimi/dsi/fastutil/ints/Int2ObjectOpenHashMap\$KeyIterator.class",
		"it/unimi/dsi/fastutil/ints/Int2ObjectOpenHashMap\$KeySet.class",
		"it/unimi/dsi/fastutil/ints/Int2ObjectOpenHashMap\$MapIterator.class",
		"it/unimi/dsi/fastutil/ints/IntArrays.class",
		"it/unimi/dsi/fastutil/ints/IntCollection.class",
		"it/unimi/dsi/fastutil/ints/AbstractInt2IntFunction.class",
		"it/unimi/dsi/fastutil/ints/Int2ObjectMap.class",
		"it/unimi/dsi/fastutil/ints/Int2ObjectMap\$FastEntrySet.class",
		"it/unimi/dsi/fastutil/ints/Int2IntMap.class",
		"it/unimi/dsi/fastutil/ints/Int2IntMap\$FastEntrySet.class",
		"it/unimi/dsi/fastutil/ints/IntIterators.class",
		"it/unimi/dsi/fastutil/ints/IntComparator.class",
		"it/unimi/dsi/fastutil/ints/AbstractIntListIterator.class",
		"it/unimi/dsi/fastutil/ints/AbstractIntList.class",
		"it/unimi/dsi/fastutil/ints/AbstractInt2ObjectMap.class",
		"it/unimi/dsi/fastutil/ints/IntSet.class",
		"it/unimi/dsi/fastutil/longs/Long2LongFunction.class",
	]
}

configurations {
	partial.extendsFrom compileOnly
}

dependencies {

	compileOnly("it.unimi.dsi:fastutil:${depVersion.fastutil}") {
		transitive = false
	}

	provided(
		"commons-codec:commons-codec:${depVersion.commonsCodec}",
		"commons-lang:commons-lang:${depVersion.commonsLang}",
		"com.fasterxml.jackson.core:jackson-annotations:${depVersion.jackson}",
		"com.fasterxml.jackson.core:jackson-core:${depVersion.jackson}",
		"com.fasterxml.jackson.core:jackson-databind:${depVersion.jackson}",
		"com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${depVersion.jackson}",
		"com.github.akurilov:confuse:${depVersion.confuse}",
		"com.github.akurilov:confuse-io-yaml:${depVersion.confuseIoYaml}",
		"com.github.akurilov:fiber4j:${depVersion.fiber4j}",
		"com.github.akurilov:java-commons:${depVersion.javaCommons}",
		"com.lmax:disruptor:${depVersion.disruptor}",
		"io.prometheus:simpleclient:${depVersion.tsdbMetrics}",
		"io.prometheus:simpleclient_servlet:${depVersion.tsdbMetrics}",
		"io.prometheus:simpleclient_hotspot:${depVersion.tsdbMetrics}",
		"org.apache.logging.log4j:log4j-api:${depVersion.log4j}",
		"org.apache.logging.log4j:log4j-core:${depVersion.log4j}",
		"org.eclipse.jetty:jetty-server:${depVersion.jetty}",
		"org.eclipse.jetty:jetty-servlet:${depVersion.jetty}",
		"org.eclipse.jetty:jetty-rewrite:${depVersion.jetty}",
		// actually the deps below are the runtime deps
		"org.apache.logging.log4j:log4j-jul:${depVersion.log4j}",
		"org.apache.logging.log4j:log4j-slf4j-impl:${depVersion.log4j}",
		"org.slf4j:slf4j-api:${depVersion.slf4j}",
	)

	testCompile(
		"com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${depVersion.jackson}",
		"junit:junit:${depVersion.junit}",
		"org.scala-lang:scala-compiler:${depVersion.scala}",
		"org.scala-lang:scala-library:${depVersion.scala}",
		"com.github.docker-java:docker-java:[3,)",
		"org.apache.commons:commons-csv:1.1",
		"com.google.guava:guava:25.1-jre",
		"org.apache.commons:commons-math3:3.6.1",
		"org.mockito:mockito-core:2.23.0",
	)
}

task mergeLog4j2PluginsDat(dependsOn: compileJava) {
	doLast {

		byte[] pluginsData
		byte[] customPluginsData

		configurations.provided
			.each {
			if(!it.isDirectory()) {
				zipTree(it)
					.filter {
					it.toString().endsWith(log4j2PluginsDatPath.toString())
				}
				.each {
					pluginsData = Files.readAllBytes(Paths.get(it.toString()))
				}
			}
		}

		sourceSets.main.output.classesDirs
			.any {
			customPluginsData = Files.readAllBytes(
				Paths.get(it.toString(), log4j2PluginsDatPath.toString(),)
			)
		}

		sourceSets.main.output.classesDirs
			.any {
			Files.write(
				Paths.get(it.toString(), log4j2PluginsDatPath.toString(),),
				pluginsData, StandardOpenOption.TRUNCATE_EXISTING
			)
			Files.write(
				Paths.get(it.toString(), log4j2PluginsDatPath.toString(),),
				customPluginsData, StandardOpenOption.APPEND
			)
		}
	}
}

jar {
	dependsOn += mergeLog4j2PluginsDat
	manifest {
		attributes(
			"Main-Class": mainClass,
			"Implementation-Title": project.description,
		)
	}
	provided3rdPartyClasses.each {
		final clsName = it
		from(configurations.partial.collect { zipTree(it) }) {
			include "**" + clsName
		}
	}
	from configurations.provided.collect {
		it.isDirectory() ? it : zipTree(it)
	}
}
