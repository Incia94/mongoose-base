image: docker:stable

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  IMAGE_NAME: emcmongoose/mongoose
  IMAGE_FILE_NAME: build/mongoose.tar
  JAVA_HOME: /opt/jdk-11.0.2+9
  ROBOTEST_CONTAINER_WORKING_DIR: /root/mongoose
  SERVICE_HOST: docker # should be used instead of the "localhost"/"127.0.0.1" in GL CI

services:
  - docker:dind

stages:
  - build
  - test # unit/integration tests
  - build_docker_image
  - test_functional # functional containerized tests
  - deploy

before_script:
  - apk --update add --no-cache ca-certificates curl openssl binutils xz
  - curl -Lks https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.2%2B9/OpenJDK11U-jdk_x64_linux_hotspot_11.0.2_9.tar.gz -o /tmp/jdk11.tgz
  - tar xvf /tmp/jdk11.tgz -C /opt
  - rm -rf /tmp/jdk11.tgz
  - export PATH=${PATH}:${JAVA_HOME}/bin
  - export GLIBC_VER="2.28-r0"
  - export ALPINE_GLIBC_REPO="https://github.com/sgerrand/alpine-pkg-glibc/releases/download"
  - export GCC_LIBS_URL="https://archive.archlinux.org/packages/g/gcc-libs/gcc-libs-8.2.1%2B20180831-1-x86_64.pkg.tar.xz"
  - export GCC_LIBS_SHA256=e4b39fb1f5957c5aab5c2ce0c46e03d30426f3b94b9992b009d417ff2d56af4d
  - export ZLIB_URL="https://archive.archlinux.org/packages/z/zlib/zlib-1%3A1.2.9-1-x86_64.pkg.tar.xz"
  - export ZLIB_SHA256=bb0959c08c1735de27abf01440a6f8a17c5c51e61c3b4c707e988c906d3b7f67
  - curl -Lks https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub -o /etc/apk/keys/sgerrand.rsa.pub
  - curl -Lks ${ALPINE_GLIBC_REPO}/${GLIBC_VER}/glibc-${GLIBC_VER}.apk > /tmp/${GLIBC_VER}.apk
  - apk add --allow-untrusted /tmp/${GLIBC_VER}.apk
  - curl -Lks ${GCC_LIBS_URL} -o /tmp/gcc-libs.tar.xz
  - echo "${GCC_LIBS_SHA256}  /tmp/gcc-libs.tar.xz" | sha256sum -c -
  - mkdir /tmp/gcc
  - tar -xf /tmp/gcc-libs.tar.xz -C /tmp/gcc
  - mv /tmp/gcc/usr/lib/libgcc* /tmp/gcc/usr/lib/libstdc++* /usr/glibc-compat/lib
  - strip /usr/glibc-compat/lib/libgcc_s.so.* /usr/glibc-compat/lib/libstdc++.so*
  - curl -Lks ${ZLIB_URL} -o /tmp/libz.tar.xz
  - echo "${ZLIB_SHA256}  /tmp/libz.tar.xz" | sha256sum -c -
  - mkdir /tmp/libz
  - tar -xf /tmp/libz.tar.xz -C /tmp/libz
  - mv /tmp/libz/usr/lib/libz.so* /usr/glibc-compat/lib
  - apk del binutils
  - rm -rf /tmp/${GLIBC_VER}.apk /tmp/gcc /tmp/gcc-libs.tar.xz /tmp/libz /tmp/libz.tar.xz /var/cache/apk/*

build:
  stage: build
  script:
    - ./gradlew clean jar
  artifacts:
    paths:
      - build/libs/mongoose-*.jar

test_unit:
  stage: test
  script:
    - ./gradlew test

test_integration:
  stage: test
  script:
    - ./gradlew integrationTest
  artifacts:
    paths:
      - base/build/reports/tests/integrationTest/*
    when: on_failure

build_docker_image:
  stage: build_docker_image
  script:
    - docker build -f ci/docker/Dockerfile -t ${IMAGE_NAME}:${CI_COMMIT_SHA} .
    - docker save ${IMAGE_NAME}:${CI_COMMIT_SHA} > ${IMAGE_FILE_NAME}
  artifacts:
    paths:
      - ${IMAGE_FILE_NAME}

.test_robot:
  stage: test_functional
  variables:
    HOST_WORKING_DIR: ${CI_PROJECT_DIR}
    MONGOOSE_IMAGE_VERSION: ${CI_COMMIT_SHA}
    PYTHONPATH: ${PYTHONPATH}:/usr/lib/python2.7/site-packages:base/src/test/robot/lib
  before_script:
    - apk add --no-cache --update python py-pip
    - pip install -U virtualenv
    - pip install -U requests
    - pip install -U robotframework
    - pip install -U robotframework-requests
    - pip install -U robotframework-csvlibrary
  script:
    - export MONGOOSE_VERSION=$(cat base/src/main/resources/config/defaults.yaml | grep version | sed -n 's/.*\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p')
    - export MONGOOSE_IMAGE_VERSION=${CI_COMMIT_SHA}
    - docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
    - docker load < ${IMAGE_FILE_NAME}
    - robot --outputdir base/build/robotest --suite ${SUITE} --include ${TEST} base/src/test/robot
  after_script:
    - rebot base/build/robotest/output.xml
  artifacts:
    paths:
      - base/build/robotest/*.html
    when: on_failure

test_api_remote_logs:
  extends: .test_robot
  variables:
    SUITE: api.remote
    TEST: logs

test_api_remote_config:
  extends: .test_robot
  variables:
    SUITE: api.remote
    TEST: config

test_api_remote_run:
  extends: .test_robot
  variables:
    SUITE: api.remote
    TEST: run

test_api_storage_s3:
  extends: .test_robot
  variables:
    SUITE: api.storage
    TEST: s3

test_api_storage_swift:
  extends: .test_robot
  variables:
    SUITE: api.storage
    TEST: swift

deploy_to_maven_repo:
  stage: deploy
  script: # TODO
    - echo TODO
  only:
    - tags

deploy_to_docker_hub:
  stage: deploy
  script:
    - docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
    - docker load < ${IMAGE_FILE_NAME}
    - docker tag ${IMAGE_NAME}:${CI_COMMIT_SHA} ${IMAGE_NAME}:${CI_COMMIT_TAG}
    - docker push ${IMAGE_NAME}:${CI_COMMIT_TAG}
    - docker tag ${IMAGE_NAME}:${CI_COMMIT_SHA} ${IMAGE_NAME}:latest
    - docker push ${IMAGE_NAME}:latest
  only:
    - tags
